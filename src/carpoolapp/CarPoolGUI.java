package carpoolapp;

import java.util.ArrayList;

public class CarPoolGUI extends javax.swing.JFrame {
    CarPoolDB cpdb;
    private ArrayList<String> result;    
        
    /**
     * Creates new form CarPoolGUI
     */
    public CarPoolGUI() {
        initComponents();
        cpdb = new CarPoolDB();
        result = new ArrayList();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        textAreaTA = new javax.swing.JTextArea();
        getBtn = new javax.swing.JButton();
        doitBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("jLabel1");

        textAreaTA.setColumns(20);
        textAreaTA.setRows(5);
        jScrollPane1.setViewportView(textAreaTA);

        getBtn.setText("GET");
        getBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getBtnActionPerformed(evt);
            }
        });

        doitBtn.setText("DO IT");
        doitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doitBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(49, 49, 49)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(getBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(doitBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 68, Short.MAX_VALUE))))
                .addContainerGap(149, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addComponent(getBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(doitBtn))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(178, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void getBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getBtnActionPerformed
        if(!result.isEmpty()){
            result.clear();
        }
        
        result = cpdb.query("SELECT * FROM users");//, passengers WHERE users.userID = passengers.userID;");
        for(int i=0; i < result.size(); i++) {
            textAreaTA.append(result.get(i) + "\n");
        }
    }//GEN-LAST:event_getBtnActionPerformed

    private void doitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doitBtnActionPerformed
        
        //cpdb.doStuff("DROP TABLE users, passengers, drivers, cars, trips, bookings, preferences;");
        
        /**
        cpdb.doStuff("CREATE TABLE users(userID SERIAL PRIMARY KEY, "
                + "username varchar(40) UNIQUE NOT NULL, "
                + "email varchar(40) UNIQUE NOT NULL, "
                + "password varchar(40) NOT NULL, "
                + "dateOfBirth varchar(10) NOT NULL,"
                + "gender varchar(10) NOT NULL,"
                + "avatar varchar(255),"
                + "bio varchar(255),"
                + "registrationDate varchar(10) NOT NULL, "
                + "passengerTripsCount integer NOT NULL, "
                + "driverTripsCount integer NOT NULL)");
        
        
        cpdb.doStuff("CREATE TABLE passengers(passengerID SERIAL PRIMARY KEY, "
                + "userID integer REFERENCES users(userID) ON DELETE CASCADE)");
                
        cpdb.doStuff("CREATE TABLE drivers(driverID SERIAL PRIMARY KEY,"
                + "userID integer REFERENCES users(userID) ON DELETE CASCADE,"
                + "rating NUMERIC NOT NULL)");
        
        cpdb.doStuff("CREATE TABLE admins(adminID SERIAL PRIMARY KEY,"
                + "userID integer REFERENCES users(userID) ON DELETE CASCADE"
                + ")");
                
        cpdb.doStuff("CREATE TABLE cars(carID SERIAL PRIMARY KEY, "
                + "driverID integer REFERENCES drivers(driverID) ON DELETE CASCADE,"
                + "brand varchar(40) NOT NULL,"
                + "model varchar(40) NOT NULL,"
                + "year integer NOT NULL"
                + ")");     
        
        cpdb.doStuff("CREATE TABLE trips("
                + "tripID SERIAL PRIMARY KEY,"
                + "driverID integer REFERENCES drivers(driverID),"
                + "isComplete boolean DEFAULT FALSE,"
                + "datePosted varchar(10) NOT NULL,"
                + "departureAddress varchar(255) NOT NULL,"
                + "departureDateAndTime varchar(16) NOT NULL,"
                + "arrivalAddress varchar(255) NOT NULL,"
                + "arrivalDateAndTime varchar(16) NOT NULL,"
                + "distanceKM NUMERIC NOT NULL"
                + ")");  
        
        cpdb.doStuff("CREATE TABLE bookings("
                + "bookingID SERIAL PRIMARY KEY,"
                + "passengerID integer REFERENCES passengers(passengerID),"
                + "tripsID integer REFERENCES trips(tripID),"
                + "status varchar(40) NOT NULL"           
                + ")");
                    
        cpdb.doStuff("CREATE TABLE preferences("
                + "preferenceID SERIAL PRIMARY KEY,"
                + "tripsID integer REFERENCES trips(tripID),"
                + "seatsAvailable integer NOT NULL,"
                + "pricePerSeat NUMERIC NOT NULL,"
                + "luggageAllowed boolean NOT NULL,"
                + "smokingAllowed boolean NOT NULL,"
                + "petAllowed boolean NOT NULL,"
                + "chattyDriver boolean NOT NULL,"
                + "musicLover boolean NOT NULL,"
                + "description varchar(255) NOT NULL"           
                + ")");
        
       **/
        
        
                
                
                
        //---------------------------------------------------------------------------------------
        /**
        cpdb.doStuff("INSERT INTO users "
                + "VALUES ("
                + "DEFAULT,"
                + "'robb', "
                + "'robb@gmail.com',"
                + "'noooone',"
                + "'10-10-1987',"
                + "'male',"
                + "'http://ccc.com/avatar.png',"
                + "'just meee',"
                + "'20-12-2019',"
                + "1,"
                + "0)");
                
        cpdb.doStuff("INSERT INTO users VALUES ("
                + "2, "
                + "'andrew', "
                + "'andyand@gmail.com',"
                + "'pieesss',"
                + "'11-04-2018',"
                + "3,"
                + "0)");
        
        cpdb.doStuff("INSERT INTO users VALUES ("
                + "3, "
                + "'buns', "
                + "'bunnies@gmail.com',"
                + "'babyrabbits',"
                + "'02-02-2018',"
                + "6,"
                + "9)");
        
        
        cpdb.doStuff("INSERT INTO passengers VALUES(1, 2)");
        cpdb.doStuff("INSERT INTO passengers VALUES(2, 1)");
        cpdb.doStuff("INSERT INTO passengers VALUES(3, 3)");
        
        
        
        cpdb.doStuff("INSERT INTO users VALUES ("
                + "4, "
                + "'Ovidiu', "
                + "'ovidiub@gmail.com',"
                + "'bestborhan',"
                + "'21-12-2018',"
                + "2,"
                + "0)");
                 
        **/
        
        
        
    }//GEN-LAST:event_doitBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CarPoolGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CarPoolGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CarPoolGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CarPoolGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CarPoolGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton doitBtn;
    private javax.swing.JButton getBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea textAreaTA;
    // End of variables declaration//GEN-END:variables
}
